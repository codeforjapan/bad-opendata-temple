{"version":3,"sources":["webpack:///./src/components/footer.tsx","webpack:///./node_modules/gatsby-plugin-breakpoints/withBreakpoints.js","webpack:///./src/components/bellSoundButton.tsx","webpack:///./src/components/header.tsx","webpack:///./node_modules/gatsby-plugin-image/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./node_modules/gatsby-plugin-image/node_modules/prop-types/factoryWithThrowingShims.js","webpack:///./node_modules/gatsby-plugin-breakpoints/index.js","webpack:///./node_modules/gatsby-plugin-image/node_modules/prop-types/index.js","webpack:///./node_modules/camelcase/index.js","webpack:///./src/components/button.tsx","webpack:///./src/components/globalNavigation.tsx","webpack:///../src/image-utils.ts","webpack:///../src/components/hooks.ts","webpack:///../src/components/picture.tsx","webpack:///../src/components/layout-wrapper.tsx","webpack:///../src/components/placeholder.tsx","webpack:///../src/components/main-image.tsx","webpack:///../src/components/gatsby-image.browser.tsx","webpack:///../src/components/gatsby-image.server.tsx","webpack:///../src/components/static-image.server.tsx","webpack:///../src/components/static-image.tsx"],"names":["WordArtContainer","styled","div","ContactContainer","AddressContainer","TempleImg","props","CopyContainer","Footer","data","useStaticQuery","image","wordart","childImageSharp","gatsbyImageData","alt","href","fixed","temple","_interopRequireDefault","require","exports","__esModule","withBreakpoints","_extends2","_react","_BreakpointProvider","Component","breakpoints","useBreakpoint","default","createElement","Stick","stick","stickTaped","BellSoundButton","el","useRef","publicURL","onMouseDown","current","play","orin","ref","src","type","HeaderContainer","header","Heading","h1","HeadingLink","FlexWrap","ButtonContainer","GitHubContainer","Header","Title","globalHistory","location","pathname","site","siteMetadata","title","to","github","onClick","window","open","module","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","BreakpointProvider","_withBreakpoints","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","OldFashionedLinkButton","Button","path","activeClassName","text","contents","MenuList","ul","MenuItem","li","attrs","isMobile","GlobalNavigation","menuItems","item","index","key","sm","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","role","children","Fragment","Sizer","srcSet","decoding","undefined","fallback","t","sizes","Image","media","propTypes","Picture","displayName","Placeholder","MainImage","rest","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage"],"mappings":"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","file":"1052dc90fc9d76a71a2e5a3be9d580f88bed06a4-8bff1bb102a7d1e1ce86.js","sourcesContent":["import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport styled from 'styled-components'\n\nconst WordArtContainer = styled.div`\n  background-color: rebeccapurple;\n  padding: 16px;\n`\n\nconst ContactContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  background-color: #808080;\n  padding: 0 30px;\n`\n\nconst AddressContainer = styled.div`\n  padding: 0 20px 20px 0;\n  p {\n    margin: 0;\n  }\n`\n\nconst TempleImg = styled((props) => (\n  <GatsbyImage {...props} />\n))`\n  flex: 0 0 auto;\n`\n\nconst CopyContainer = styled.div`\n  background-color: #002198;\n  color: #fff;\n  text-align: center;\n  padding: 12px 30px;\n`\n\nconst Footer = () => {\n  const data = useStaticQuery(graphql`\n    {\n      temple: file(relativePath: { eq: \"temple.png\" }) {\n        childImageSharp {\n          gatsbyImageData(width: 189, layout: FIXED)\n        }\n      }\n      wordart: file(relativePath: { eq: \"wordart.png\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: FULL_WIDTH)\n        }\n      }\n    }\n  `)\n\n  return (\n    <footer>\n      <WordArtContainer>\n        <GatsbyImage\n          image={\n            data.wordart.childImageSharp.gatsbyImageData\n          }\n          alt=\"ワードアート\"\n        />\n      </WordArtContainer>\n      <ContactContainer>\n        <AddressContainer>\n          <h2>寺務所</h2>\n          <p>Code for Japan内</p>\n          <p>\n            まずは\n            <a href=\"https://join.slack.com/t/cfj/shared_invite/zt-473qa2x1-Fc_Uo76uPPRm2j~JBWRx1w\">\n              こちら\n            </a>\n            からCode for\n            Japanの公式Slackにご参加頂き、以下のチャンネルにご参加ください。\n          </p>\n          <span>#proj-bod供養寺</span>\n        </AddressContainer>\n        <TempleImg\n          fixed={\n            data.temple.childImageSharp.gatsbyImageData\n          }\n        />\n      </ContactContainer>\n      <CopyContainer>\n        <small>\n          このサイトの内容物は クリエイティブ・コモンズ 表示\n          4.0 ライセンス の下に提供されています。 &copy;\n          2020 BADオープンデータ供養寺\n        </small>\n      </CopyContainer>\n    </footer>\n  )\n}\nexport default Footer\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.withBreakpoints = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _BreakpointProvider = require(\"./BreakpointProvider\");\n\nconst withBreakpoints = Component => {\n  return props => {\n    const breakpoints = (0, _BreakpointProvider.useBreakpoint)();\n    return /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({\n      breakpoints: breakpoints\n    }, props));\n  };\n};\n\nexports.withBreakpoints = withBreakpoints;","import React, { useRef } from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport styled from 'styled-components'\n\ntype Props = {\n  stick: string\n  stickTaped: string\n}\n\nconst Stick = styled.div`\n  width: 43px;\n  cursor: url('${(props: Props) => props.stick}') 10 30,\n    auto;\n  &:active {\n    cursor: url('${(props: Props) => props.stickTaped}') 10\n        20,\n      auto;\n  }\n`\n\nconst BellSoundButton = () => {\n  const el = useRef(null)\n  const handleClick = () => el.current.play()\n  const data = useStaticQuery(graphql`\n    {\n      orin: file(relativePath: { eq: \"orin.png\" }) {\n        childImageSharp {\n          gatsbyImageData(width: 43, layout: FIXED)\n        }\n      }\n      stick: file(relativePath: { eq: \"orinbou_1.gif\" }) {\n        publicURL\n      }\n      stickTaped: file(\n        relativePath: { eq: \"orinbou_2.gif\" }\n      ) {\n        publicURL\n      }\n    }\n  `)\n\n  return (\n    <Stick\n      stick={data.stick.publicURL}\n      stickTaped={data.stickTaped.publicURL}\n    >\n      <span onMouseDown={handleClick}>\n        <GatsbyImage\n          image={data.orin.childImageSharp.gatsbyImageData}\n          alt=\"お鈴\"\n        />\n      </span>\n      <audio ref={el}>\n        <source src=\"/mp3/ding.mp3\" type=\"audio/mp3\" />\n      </audio>\n    </Stick>\n  )\n}\n\nexport default BellSoundButton\n","import * as React from 'react'\nimport { Link, graphql, useStaticQuery } from 'gatsby'\nimport { globalHistory } from '@reach/router'\nimport styled from 'styled-components'\nimport BellSoundButton from './bellSoundButton'\n\nconst HeaderContainer = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  background: rebeccapurple;\n`\n\nconst Heading = styled.h1`\n  font-size: 24px;\n  color: #fff;\n  margin: 0;\n`\n\nconst HeadingLink = styled((props) => <Link {...props} />)`\n  font-size: 24px;\n  color: #fff;\n  font-weight: bold;\n  text-decoration: none;\n`\n\nconst FlexWrap = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst ButtonContainer = styled.div`\n  margin: 0 16px;\n`\nconst GitHubContainer = styled.div`\n  margin: 0;\n`\n\ninterface HeaderPageProps {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  github: {\n    publicURL: string\n  }\n}\n\nconst Header = () => {\n  const data: HeaderPageProps = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n        github: file(relativePath: { eq: \"github.png\" }) {\n          publicURL\n        }\n      }\n    `\n  )\n  const Title = () => {\n    return globalHistory.location.pathname === '/' ? (\n      <Heading>{data.site.siteMetadata.title}</Heading>\n    ) : (\n      <HeadingLink to=\"/\">\n        {data.site.siteMetadata.title}\n      </HeadingLink>\n    )\n  }\n  const params = 'width=350,height=300'\n\n  return (\n    <HeaderContainer>\n      <Title />\n      <FlexWrap>\n        <GitHubContainer>\n          <div>\n            <a href=\"https://github.com/codeforjapan/bad-opendata-temple/\">\n              <img\n                src={data.github.publicURL}\n                alt=\"GitHub\"\n              />\n            </a>\n          </div>\n        </GitHubContainer>\n        <ButtonContainer>\n          <button\n            onClick={() =>\n              window.open(\n                '/dedication',\n                'dedication',\n                params\n              )\n            }\n          >\n            奉納\n          </button>\n        </ButtonContainer>\n        <BellSoundButton />\n      </FlexWrap>\n    </HeaderContainer>\n  )\n}\nexport default Header\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _BreakpointProvider = require(\"./BreakpointProvider\");\n\nexports.useBreakpoint = _BreakpointProvider.useBreakpoint;\nexports.BreakpointProvider = _BreakpointProvider.BreakpointProvider;\n\nvar _withBreakpoints = require(\"./withBreakpoints\");\n\nexports.withBreakpoints = _withBreakpoints.withBreakpoints;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import * as React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst OldFashionedLinkButton = styled((props) => (\n  <Link {...props} />\n))`\n  flex: 1 1 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 12px;\n  background-color: #bfbfbf;\n  border-style: solid;\n  border-width: 3px;\n  border-color: #fafafa #757575 #757575 #fafafa;\n  text-decoration: none;\n  &:hover {\n    background-color: #cfcfcf;\n    border-color: #ffffff #858585 #858585 #ffffff;\n    text-decoration: underline;\n  }\n  &:active {\n    border-color: #757575 #eaeaea #EAEAE9A #757575;\n  }\n  &.current {\n    color: #000;\n    border-color: #757575 #fafafa #fafafa #757575;\n    &:hover {\n      background-color: inherit;\n      border-color: #757575 #fafafa #fafafa #757575;\n      text-decoration: none;\n    }\n  }\n`\n\nconst ButtonContainer = styled.div`\n  display: inline-flex;\n  align-items: center;\n  border: solid #000000 2px;\n  text-align: center;\n`\n\ninterface ButtonPropertyType {\n  path: String\n  text: String\n}\n\nconst Button = (props: ButtonPropertyType) => {\n  return (\n    <ButtonContainer>\n      <OldFashionedLinkButton\n        to={props.path}\n        activeClassName=\"current\"\n      >\n        <span>{props.text}</span>\n      </OldFashionedLinkButton>\n    </ButtonContainer>\n  )\n}\n\nexport default Button\n","import * as React from 'react'\nimport { useBreakpoint } from 'gatsby-plugin-breakpoints'\nimport styled from 'styled-components'\nimport Button from './button'\n\nconst contents = [\n  {\n    text: '当寺について',\n    path: '/about',\n  },\n  {\n    text: '供養塔',\n    path: '/list-of-contents',\n  },\n  {\n    text: '宝蔵',\n    path: '/tools',\n  },\n  {\n    text: '檀家募集',\n    path: '/contribution',\n  },\n  {\n    text: '供養依頼',\n    path: '/data-cleansing-request',\n  },\n]\n\ntype Props = {\n  isMobile: boolean\n}\n\nconst MenuList = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: 0;\n  padding: 10px;\n  background-color: #bfbfbf;\n`\n\nconst MenuItem = styled.li.attrs((props: Props) => ({\n  isMobile: props.isMobile,\n}))`\n  flex: ${(props) =>\n    props.isMobile\n      ? '1 0 33%'\n      : `0 0 calc(${100 / contents.length}% - 20px)`};\n  display: flex;\n  div {\n    flex: 1 1 auto;\n  }\n`\n\nconst GlobalNavigation = () => {\n  const breakpoints = useBreakpoint()\n  const menuItems = contents.map((item, index) => (\n    <MenuItem key={index} isMobile={breakpoints.sm}>\n      <Button text={item.text} path={item.path} />\n    </MenuItem>\n  ))\n  return (\n    <nav>\n      <MenuList>{menuItems}</MenuList>\n    </nav>\n  )\n}\n\nexport default GlobalNavigation\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"sourceRoot":""}